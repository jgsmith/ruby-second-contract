#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Grammar < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 298)

attr_accessor :debug

def initialize
  @special_words = %w(
    ABOUT AND A AN ANY ALL AGAINST AT
    BEHIND BEFORE BESIDE BLOCKING
    CLOSE CONTAINING
    FRONT FROM
    GUARDING
    HOLDING HER HIS
    IN ITS
    MY
    NEAR
    OF ON OVER
    THEN TO THAT THROUGH THE THEIR
    USING UNDER
    WITH
  )
  @verbs = []
  @adverbs = []
  @comm_verbs = []
  @movement_verbs = []
  @languages = []
end

def merge_commands *args
  res = {}
  args.each do |h|
    h.each do |k,v|
      case k
      when :adverbs
        if !res.include?(:adverbs)
          res[:adverbs] = []
        end
        res[:adverbs] += v
      when :direct
        if !res.include?(:direct)
          res[:direct] = []
        end
        res[:direct] += v
      else
        res[k] = v
      end
    end
  end
  res
end

def add_verb klass, v
  case klass.to_sym
  when :communication
    @comm_verbs << v
  when :movement
    @movement_verbs << v
  else
    @verbs << v
  end
end

def add_adverb av
  @adverbs << av
end

def add_language l
  @languages << l
end

def next_token
  @token = [ false, '$' ]
  @source.skip(/\s+/)
  if @queue.length > 0
    @token = @queue.shift
  elsif !@source.eos?
    pos = @source.pos
    case
    when @source.scan(/"([^"]*)"\s*/)
      @token = [ :STRING, @source[1] ]
    when @source.scan(/;\s*/)
      @token = [ :AND_THEN, ';' ]
      @verb_seen = false
    when @source.scan(/\/\s*/)
      @token = [ :SLASH, '/' ]
    when @source.scan(/(\d+)\s*/)
      @token = [ :NUMBER, @source[1].to_i ]
    when @source.scan(@verb_regex)
      if @verb_seen
        @token = [ :WORD, @source[1] ]
      else
        @token = [ :VERB, @source[1].downcase ]
        @verb_seen = true
      end
    when @source.scan(@comm_regex)
      if @verb_seen
        @token = [ :WORD, @source[1] ]
      else
        @token = [ :COMM_VERB, @source[1].downcase ]
        @verb_seen = true
      end
    when @source.scan(@movement_regex)
      if @verb_seen
        @token = [ :WORD, @source[1] ]
      else
        @token = [ :MOVEMENT_VERB, @source[1].downcase ]
        @verb_seen = true
      end
    when @source.scan(@adverb_regex)
      @token = [ :ADVERB, @source[1].downcase ]
    when @source.scan(@language_regex)
      @token = [ :LANGUAGE, @source[1].downcase ]
    when @source.scan(/(and\s+then)\s+/)
      @token = [ :AND_THEN, @source[1] ]
      @verb_seen = false
    when @source.scan(@special_regex)
      @token = [ @source[1].upcase.to_sym, @source[1].downcase ]
      if @token[0] == :THEN
        @verb_seen = false
      end
    when @source.scan(/(\S+)\s+/)
      @token = [ :WORD, @source[1] ]
    else
      @source.skip(/\S+\s*/)
    end
    if pos == @source.pos
      # nothing matched
      @token = [ false, '$' ]
    end
    if @token.first == :WORD && @token.last =~ /\s/
      words = @token.last.split(/\s+/)
      @token[1] = words.shift
      @queue.concat words.map { |w| [ :WORD, w ] }
    end
  end
  puts @token.join(" => ") + " : [#{@source.rest}]" if @debug && !@token.nil?
  @token
end

def on_error(*args)
  #puts "Error around '" + (args[2].select{ |v| v.is_a?(String) }.join(" ")) + " " + args[1] + "'"
  @failed = true
end

def failed?
  @failed
end

def make_regex list
  Regexp.new("(" + list.sort{ |a,b| b.length - a.length }.map{|v| v.split(/\s+/).join("\\s+")}.join("|") + ")\\s+")
end

def parse(text)
  @failed = false
  bits = text.split(/"/)
  if text.start_with?('"')
    bits.unshift ""
  end
  if text.end_with?('"')
    bits.push ""
  end
  i = 0
  while i < bits.length
    bits[i].gsub!(/,/,' ')
    i += 2
  end
  text = bits.join('"')
  text.gsub!(/\s*;\s*/, ' ; ')

  @source = StringScanner.new(text.strip.sub(/\s+/, " ")+" ")
  @verb_regex = make_regex(@verbs)
  @comm_regex = make_regex(@comm_verbs)
  @movement_regex = make_regex(@movement_verbs)
  @language_regex = make_regex(@languages)
  @adverb_regex = make_regex(@adverbs)
  @special_regex = make_regex(@special_words.map{ |w| w.downcase })
  @verb_seen = false
  @queue = []

  do_parse
end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   -42,    88,     6,    60,    91,   129,    18,   123,   -42,   127,
   123,   121,   123,  -110,   121,    30,   121,  -110,   119,    55,
    32,   119,   -51,    46,    47,    48,    43,     7,     7,   122,
    36,   -42,   122,    92,   122,  -110,    20,   116,   -42,    50,
    51,    94,    52,    49,   -42,    21,   -42,   -42,   156,  -106,
     6,   123,    45,    53,    38,   121,    37,   -51,    30,     6,
   158,    94,    55,    32,   -51,    36,    46,    47,    48,    43,
    14,    14,    36,   122,    38,     7,    37,     6,    12,    12,
   -51,    14,    50,    51,    28,    52,    49,   119,    36,    12,
   -51,    13,    13,    15,    15,    45,    53,    38,    36,    37,
   -51,    30,    13,   138,    15,    55,    32,   -51,    36,    46,
    47,    48,    43,   -51,    14,    36,   -51,    86,    30,   128,
    60,    36,    12,    32,    36,    50,    51,    94,    52,    49,
    17,    30,   137,     6,   nil,    13,    32,    15,    45,    53,
    38,    14,    37,   -51,    14,    14,   nil,   nil,    14,    12,
    30,    36,    12,    12,    55,    32,    12,    94,    46,    47,
    48,    43,    13,   nil,    15,    13,    13,    15,    15,    13,
    38,    15,    37,   -51,    50,    51,    94,    52,    49,    30,
    30,    36,   nil,   nil,    32,    32,  -110,    45,    53,    38,
  -110,    37,    55,   nil,   nil,   nil,    46,    47,    48,    43,
   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,  -110,    12,
   nil,   nil,    50,    51,   nil,    52,    49,   nil,   nil,   nil,
   nil,    14,    13,    30,    15,    45,    53,    55,    32,    12,
   nil,    46,    47,    48,    43,   nil,    30,   nil,   nil,   nil,
   nil,    32,    13,   nil,    15,    14,   nil,    50,    51,    14,
    52,    49,   nil,    12,    30,   nil,   nil,    12,    55,    32,
    45,    53,    46,    47,    48,    43,    13,    14,    15,   nil,
    13,   nil,    15,   nil,   nil,    12,   nil,   nil,    50,    51,
   nil,    52,    49,   nil,   nil,   nil,   nil,   nil,    13,    30,
    15,    45,    53,    55,    32,   nil,   nil,    46,    47,    48,
    43,    55,   nil,   nil,   nil,    46,    47,    48,    43,   nil,
   nil,   nil,   nil,    50,    51,   nil,    52,    49,   nil,     6,
   nil,    50,    51,    94,    52,    49,    45,    53,   nil,   nil,
   nil,    14,   nil,   nil,    45,    53,    38,   nil,    37,    12,
   nil,    55,   nil,   nil,     7,    46,    47,    48,    43,   nil,
    14,   nil,    13,   nil,    15,   nil,   nil,   nil,    12,   nil,
   nil,    50,    51,    55,    52,    49,   nil,    46,    47,    48,
   155,    13,   nil,    15,    45,    53,   nil,   nil,   nil,   nil,
    14,   nil,   nil,    50,    51,    55,    52,    49,    12,    46,
    47,    48,    43,     7,   nil,   nil,    45,    53,   nil,   nil,
   nil,    13,   nil,    15,   nil,    50,    51,    55,    52,    49,
   nil,    46,    47,    48,    43,   nil,   nil,   nil,    45,    53,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,    55,
    52,    49,   nil,    46,    47,    48,    43,   nil,   nil,   nil,
    45,    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
    51,    55,    52,    49,   nil,    46,    47,    48,    43,   nil,
   nil,   nil,    45,    53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    51,    55,    52,    49,   nil,    46,    47,    48,
    43,   nil,   nil,   nil,    45,    53,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,    55,    52,    49,   nil,    46,
    47,    48,    43,   nil,   nil,   nil,    45,    53,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,    55,    52,    49,
   nil,    46,    47,    48,   155,   nil,   nil,   nil,    45,    53,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,
    52,    49,    70,   nil,    75,    76,    77,    82,    71,    78,
    45,    53,    81,    79,   nil,   nil,    68,   nil,   nil,    73,
   nil,    69,    74,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    72,    80,    70,   nil,    75,    76,    77,    82,    71,    78,
   nil,   nil,    81,    79,   nil,   nil,    68,   nil,   nil,    73,
   nil,    69,    74,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    72,    80,    70,   nil,    75,    76,    77,    82,    71,    78,
   nil,   nil,    81,    79,   nil,   nil,    68,   nil,   nil,    73,
   nil,    69,    74,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    72,    80,    70,   nil,    75,    76,    77,    82,    71,    78,
   nil,   nil,    81,    79,   nil,    14,    68,   nil,   nil,    73,
   nil,    69,    74,    12,   nil,   nil,   nil,   nil,    94,   nil,
    72,    80,   nil,   nil,   nil,   nil,    13,   nil,    15,   nil,
   nil,    38,   nil,    37 ]

racc_action_check = [
    99,    22,    11,    28,    22,    58,     2,    41,    99,    54,
   143,    41,    90,    29,   143,    29,    90,    29,    39,    29,
    29,   120,   130,    29,    29,    29,    29,    11,    63,    41,
   130,    99,   143,    22,    90,    29,     2,    35,    99,    29,
    29,    29,    29,    29,    99,     2,    99,    99,   128,    43,
    65,   125,    29,    29,    29,   125,    29,     4,     4,     4,
   137,    25,     4,     4,   139,     4,     4,     4,     4,     4,
   110,     4,   139,   125,    25,    66,    25,    67,   110,     4,
   142,    62,     4,     4,     4,     4,     4,    85,   142,    62,
    61,   110,     4,   110,     4,     4,     4,     4,    61,     4,
    87,    87,    62,    71,    62,    87,    87,   117,    87,    87,
    87,    87,    87,    59,    87,   117,   104,    17,   109,    55,
     7,    59,    87,   109,   104,    87,    87,    87,    87,    87,
     1,    33,    68,    10,   nil,    87,    33,    87,    87,    87,
    87,   113,    87,   106,    33,    10,   nil,   nil,    64,   113,
   141,   106,    33,    10,   141,   141,    64,    33,   141,   141,
   141,   141,   113,   nil,   113,    33,    10,    33,    10,    64,
    33,    64,    33,   152,   141,   141,   141,   141,   141,   149,
   101,   152,   nil,   nil,   149,   101,    27,   141,   141,   141,
    27,   141,    27,   nil,   nil,   nil,    27,    27,    27,    27,
   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,    27,    27,
   nil,   nil,    27,    27,   nil,    27,    27,   nil,   nil,   nil,
   nil,    96,    27,   103,    27,    27,    27,   103,   103,    96,
   nil,   103,   103,   103,   103,   nil,   112,   nil,   nil,   nil,
   nil,   112,    96,   nil,    96,    31,   nil,   103,   103,   112,
   103,   103,   nil,    31,    34,   nil,   nil,   112,    34,    34,
   103,   103,    34,    34,    34,    34,    31,    34,    31,   nil,
   112,   nil,   112,   nil,   nil,    34,   nil,   nil,    34,    34,
   nil,    34,    34,   nil,   nil,   nil,   nil,   nil,    34,   114,
    34,    34,    34,   114,   114,   nil,   nil,   114,   114,   114,
   114,    98,   nil,   nil,   nil,    98,    98,    98,    98,   nil,
   nil,   nil,   nil,   114,   114,   nil,   114,   114,   nil,     0,
   nil,    98,    98,    98,    98,    98,   114,   114,   nil,   nil,
   nil,     0,   nil,   nil,    98,    98,    98,   nil,    98,     0,
   nil,   111,   nil,   nil,     0,   111,   111,   111,   111,   nil,
   111,   nil,     0,   nil,     0,   nil,   nil,   nil,   111,   nil,
   nil,   111,   111,   129,   111,   111,   nil,   129,   129,   129,
   129,   111,   nil,   111,   111,   111,   nil,   nil,   nil,   nil,
     9,   nil,   nil,   129,   129,    16,   129,   129,     9,    16,
    16,    16,    16,     9,   nil,   nil,   129,   129,   nil,   nil,
   nil,     9,   nil,     9,   nil,    16,    16,   146,    16,    16,
   nil,   146,   146,   146,   146,   nil,   nil,   nil,    16,    16,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   146,   146,   100,
   146,   146,   nil,   100,   100,   100,   100,   nil,   nil,   nil,
   146,   146,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   100,
   100,   150,   100,   100,   nil,   150,   150,   150,   150,   nil,
   nil,   nil,   100,   100,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   150,   150,    40,   150,   150,   nil,    40,    40,    40,
    40,   nil,   nil,   nil,   150,   150,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,    40,   118,    40,    40,   nil,   118,
   118,   118,   118,   nil,   nil,   nil,    40,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   118,   118,   126,   118,   118,
   nil,   126,   126,   126,   126,   nil,   nil,   nil,   118,   118,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,   126,   nil,
   126,   126,    13,   nil,    13,    13,    13,    13,    13,    13,
   126,   126,    13,    13,   nil,   nil,    13,   nil,   nil,    13,
   nil,    13,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    13,    13,    12,   nil,    12,    12,    12,    12,    12,    12,
   nil,   nil,    12,    12,   nil,   nil,    12,   nil,   nil,    12,
   nil,    12,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    12,   151,   nil,   151,   151,   151,   151,   151,   151,
   nil,   nil,   151,   151,   nil,   nil,   151,   nil,   nil,   151,
   nil,   151,   151,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   151,   151,    42,   nil,    42,    42,    42,    42,    42,    42,
   nil,   nil,    42,    42,   nil,    26,    42,   nil,   nil,    42,
   nil,    42,    42,    26,   nil,   nil,   nil,   nil,    26,   nil,
    42,    42,   nil,   nil,   nil,   nil,    26,   nil,    26,   nil,
   nil,    26,   nil,    26 ]

racc_action_pointer = [
   313,   130,    -2,   nil,    53,   nil,   nil,   117,   nil,   362,
   127,    -4,   555,   525,   nil,   nil,   376,   117,   nil,   nil,
   nil,   nil,    -7,   nil,   nil,    30,   627,   183,     0,    10,
   nil,   227,   nil,   126,   249,    33,   nil,   nil,   nil,     6,
   464,     4,   615,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     0,   117,   nil,   nil,   -30,   109,
   nil,    86,    63,    -3,   130,    44,    44,    71,   107,   nil,
   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    75,   nil,    96,   nil,   nil,
     9,   nil,   nil,   nil,   nil,   nil,   203,   nil,   292,     0,
   420,   175,   nil,   218,   112,   nil,   139,   nil,   nil,   113,
    52,   332,   231,   123,   284,   nil,   nil,   103,   486,   nil,
     9,   nil,   nil,   nil,   nil,    48,   508,   nil,    39,   354,
    18,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,    60,
   nil,   145,    76,     7,   nil,   nil,   398,   nil,   nil,   174,
   442,   585,   169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
   -49,  -113,    -1,    -3,  -110,   -14,   -49,  -113,   -49,   -18,
  -113,  -113,   -78,   -79,   -80,   -81,  -110,  -113,    -2,   -49,
    -8,    -9,  -113,    -6,   -10,   -11,   -12,   -13,   -60,   -49,
   -49,   -33,   -49,  -113,  -110,  -113,   -52,   -58,   -59,   -49,
  -110,  -113,   -88,   -90,   -91,   -94,   -95,   -96,   -97,   -98,
   -99,  -100,  -101,  -102,  -103,  -105,  -107,  -108,  -111,   -15,
   -49,   -17,   -19,   -20,   -23,  -113,   -26,  -113,   -61,   -62,
   -63,   -64,   -66,   -67,   -68,   -69,   -70,   -72,   -73,   -74,
   -75,   -76,   -77,   -82,   -83,   -49,   161,  -110,   -49,    -5,
  -113,   -30,   -31,   -43,   -60,   -38,  -113,   -35,  -110,   -33,
  -110,  -113,   -40,  -110,   -32,   -41,   -34,   -33,   -36,  -113,
  -113,  -110,  -113,  -113,  -110,   -44,   -50,   -84,  -110,   -93,
   -49,   -53,   -54,   -55,   -56,   -87,  -110,  -104,  -113,  -113,
   -16,   -21,   -22,   -24,   -25,   -27,   -28,  -113,   -65,   -85,
    -7,  -110,    -4,   -29,   -46,   -37,  -110,   -48,   -39,  -113,
  -110,   -89,   -86,   -57,   -92,  -106,  -112,  -109,   -71,   -45,
   -47 ]

racc_goto_table = [
    33,    23,   125,    27,    31,     4,    93,    96,    63,    65,
   103,    59,    64,    66,   110,    85,    26,    62,   153,    67,
    29,     3,     1,    97,    87,    22,    83,    84,    90,    99,
   112,   115,   108,   111,    31,   104,   153,   106,    19,   120,
    89,     2,    95,    98,   117,   154,   113,   105,   151,   109,
   114,   143,   157,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   131,   nil,   133,   nil,   130,   nil,   134,   nil,   136,
   nil,   132,   nil,   nil,   135,   nil,   nil,   nil,   nil,   146,
   nil,   nil,   nil,    33,   140,   nil,    27,    31,   nil,   nil,
   139,   nil,   nil,   142,   145,   nil,    97,   nil,   nil,    26,
   108,   nil,   nil,   141,   nil,   nil,   nil,    97,   148,   nil,
   nil,   108,   144,   nil,    99,   147,   nil,   nil,   nil,   nil,
   nil,   nil,   103,   nil,   nil,   152,   149,   150,   109,    95,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    99,   159,   nil,   nil,   nil,   145,   nil,   160 ]

racc_goto_check = [
    20,     6,    18,    11,    19,     4,    21,    21,    15,    15,
    21,     4,    13,    13,    21,    27,    10,    14,    23,    14,
    16,     3,     1,    20,     4,     3,    25,    25,    17,    19,
    20,     9,    11,    11,    19,     4,    23,     4,     7,    27,
     5,     2,    16,    16,     4,    28,    10,    16,    30,    16,
    16,    18,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,    15,   nil,     4,   nil,    13,   nil,    13,
   nil,    14,   nil,   nil,    14,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,    20,     6,   nil,    11,    19,   nil,   nil,
     4,   nil,   nil,     4,    20,   nil,    20,   nil,   nil,    10,
    11,   nil,   nil,    16,   nil,   nil,   nil,    20,    11,   nil,
   nil,    11,    16,   nil,    19,    10,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,     4,    16,    16,    16,    16,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,    20,   nil,   nil,   nil,    20,   nil,    11 ]

racc_goto_pointer = [
   nil,    22,    41,    21,     5,    18,    -3,    36,   nil,    -3,
    12,    -1,   nil,     2,     8,    -1,    16,     6,   -39,     0,
    -4,   -19,   nil,  -107,   nil,    14,   nil,    -1,   -81,   nil,
   -70,   nil,   nil,   -77,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,    24,    25,
   102,   100,     5,     9,    10,    11,     8,   nil,   nil,   107,
   101,    34,    35,   124,    40,   126,    16,    39,    44,    41,
    42,   118,    54,    57,    56,    58 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 49, :_reduce_1,
  2, 49, :_reduce_2,
  1, 49, :_reduce_3,
  4, 49, :_reduce_4,
  3, 49, :_reduce_5,
  2, 50, :_reduce_6,
  4, 50, :_reduce_7,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 51, :_reduce_14,
  2, 61, :_reduce_15,
  3, 62, :_reduce_16,
  2, 63, :_reduce_17,
  1, 60, :_reduce_none,
  2, 60, :_reduce_19,
  2, 60, :_reduce_20,
  3, 60, :_reduce_21,
  3, 60, :_reduce_22,
  2, 60, :_reduce_23,
  3, 60, :_reduce_24,
  3, 60, :_reduce_25,
  2, 60, :_reduce_26,
  3, 60, :_reduce_27,
  3, 60, :_reduce_28,
  2, 53, :_reduce_29,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  2, 59, :_reduce_32,
  1, 59, :_reduce_none,
  2, 67, :_reduce_34,
  2, 58, :_reduce_35,
  2, 58, :_reduce_36,
  3, 57, :_reduce_37,
  2, 57, :_reduce_38,
  3, 57, :_reduce_39,
  2, 57, :_reduce_40,
  2, 57, :_reduce_41,
  2, 57, :_reduce_42,
  2, 56, :_reduce_43,
  2, 56, :_reduce_44,
  4, 56, :_reduce_45,
  3, 56, :_reduce_46,
  4, 56, :_reduce_47,
  3, 56, :_reduce_48,
  0, 52, :_reduce_49,
  3, 52, :_reduce_50,
  0, 70, :_reduce_51,
  1, 70, :_reduce_52,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 66, :_reduce_56,
  2, 66, :_reduce_57,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  2, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  2, 74, :_reduce_none,
  2, 74, :_reduce_none,
  2, 68, :_reduce_84,
  3, 64, :_reduce_85,
  3, 69, :_reduce_86,
  2, 76, :_reduce_87,
  1, 75, :_reduce_88,
  3, 75, :_reduce_89,
  1, 78, :_reduce_90,
  1, 78, :_reduce_none,
  3, 78, :_reduce_92,
  1, 79, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 81, :_reduce_103,
  2, 81, :_reduce_104,
  1, 81, :_reduce_105,
  1, 81, :_reduce_106,
  1, 81, :_reduce_107,
  1, 83, :_reduce_none,
  3, 83, :_reduce_109,
  0, 77, :_reduce_110,
  1, 77, :_reduce_none,
  3, 82, :_reduce_112 ]

racc_reduce_n = 113

racc_shift_n = 161

racc_token_table = {
  false => 0,
  :error => 1,
  :SLASH => 2,
  :LANGUAGE => 3,
  :ADVERB => 4,
  :VERB => 5,
  :COMM_VERB => 6,
  :WORD => 7,
  :STRING => 8,
  :NUMBER => 9,
  :MOVEMENT_VERB => 10,
  :ABOUT => 11,
  :AND => 12,
  :A => 13,
  :AN => 14,
  :ANY => 15,
  :ALL => 16,
  :AGAINST => 17,
  :AT => 18,
  :BEHIND => 19,
  :BEFORE => 20,
  :BESIDE => 21,
  :BLOCKING => 22,
  :CLOSE => 23,
  :CONTAINING => 24,
  :FRONT => 25,
  :FROM => 26,
  :GUARDING => 27,
  :HOLDING => 28,
  :HER => 29,
  :HIS => 30,
  :IN => 31,
  :ITS => 32,
  :MY => 33,
  :NEAR => 34,
  :OF => 35,
  :ON => 36,
  :OVER => 37,
  :THEN => 38,
  :TO => 39,
  :THAT => 40,
  :THROUGH => 41,
  :THE => 42,
  :THEIR => 43,
  :USING => 44,
  :UNDER => 45,
  :WITH => 46,
  :AND_THEN => 47 }

racc_nt_base = 48

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SLASH",
  "LANGUAGE",
  "ADVERB",
  "VERB",
  "COMM_VERB",
  "WORD",
  "STRING",
  "NUMBER",
  "MOVEMENT_VERB",
  "ABOUT",
  "AND",
  "A",
  "AN",
  "ANY",
  "ALL",
  "AGAINST",
  "AT",
  "BEHIND",
  "BEFORE",
  "BESIDE",
  "BLOCKING",
  "CLOSE",
  "CONTAINING",
  "FRONT",
  "FROM",
  "GUARDING",
  "HOLDING",
  "HER",
  "HIS",
  "IN",
  "ITS",
  "MY",
  "NEAR",
  "OF",
  "ON",
  "OVER",
  "THEN",
  "TO",
  "THAT",
  "THROUGH",
  "THE",
  "THEIR",
  "USING",
  "UNDER",
  "WITH",
  "AND_THEN",
  "$start",
  "sentence",
  "commands",
  "communication",
  "adverbs",
  "topic",
  "command",
  "and_then",
  "ttv",
  "btv",
  "tv",
  "verb_only",
  "comm",
  "comm_verb_only",
  "comm_language",
  "comm_target",
  "indirect_noun_phrase",
  "topic_intro",
  "words",
  "movement_verb_only",
  "dnp",
  "instrument_noun_phrase",
  "opt_and",
  "word",
  "instrument_preposition",
  "rel_preposition",
  "indirect_preposition",
  "objects",
  "noun_phrase",
  "opt_quantifier",
  "noun",
  "conjunction",
  "article",
  "quantifier",
  "fraction",
  "quantifiers" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_1(val, _values, result)
     result = { commands: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_2(val, _values, result)
     result = { commands: val[0], exclamation: val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_3(val, _values, result)
     result = { commands: [ val[0] ] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 27)
  def _reduce_4(val, _values, result)
                cmd = merge_commands(val[0], val[1], val[3])
            cmd[:communication] = val[2]
            result = { commands: [ cmd ] }
          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_5(val, _values, result)
                cmd = merge_commands(val[0], val[1], val[2])
            result = { commands: [ cmd ] }
          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_6(val, _values, result)
     result = [ merge_commands(val[0], val[1]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_7(val, _values, result)
     result = val[0] + [ merge_commands(val[2], val[3] ) ] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_14(val, _values, result)
        result = merge_commands(val[0], val[1]) 
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_15(val, _values, result)
        result = merge_commands(val[1], {
      verb: val[0]
    })
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_16(val, _values, result)
        result = merge_commands(val[2], {
      language: val[1]
    })
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_17(val, _values, result)
        result = merge_commands(val[1], {
      target: val[0]
    })
  
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_19(val, _values, result)
            result = merge_commands(val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_20(val, _values, result)
            result = merge_commands(val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_21(val, _values, result)
            result = merge_commands(val[0], val[1], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_22(val, _values, result)
            result = merge_commands(val[0], val[1], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_23(val, _values, result)
            result = merge_commands(val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_24(val, _values, result)
            result = merge_commands(val[0], val[1], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_25(val, _values, result)
            result = merge_commands(val[0], val[1], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_26(val, _values, result)
            result = merge_commands(val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_27(val, _values, result)
            result = merge_commands(val[0], val[1], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_28(val, _values, result)
            result = merge_commands(val[0], val[1], val[2])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_29(val, _values, result)
        result = {
      topic: val[1] 
    }
  
    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_32(val, _values, result)
                 result = merge_commands(val[1], {
               verb: val[0]
             })
           
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_34(val, _values, result)
        result = merge_commands(val[1], {
      verb: val[0]
    })
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_35(val, _values, result)
          result = merge_commands(val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_36(val, _values, result)
          result = merge_commands(val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_37(val, _values, result)
           result = merge_commands(val[0], val[1], val[2])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_38(val, _values, result)
           result = merge_commands(val[0], val[1])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_39(val, _values, result)
           result = merge_commands(val[0], val[1], val[2])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_40(val, _values, result)
           result = merge_commands(val[0], val[1])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_41(val, _values, result)
           result = merge_commands(val[0], val[1])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_42(val, _values, result)
           result = merge_commands(val[0], val[1])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_43(val, _values, result)
           result = merge_commands(val[0], val[1])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_44(val, _values, result)
           result = merge_commands(val[0], val[1])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_45(val, _values, result)
           result = merge_commands(val[0], val[1], val[2], val[3])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_46(val, _values, result)
           result = merge_commands(val[0], val[1], val[2])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_47(val, _values, result)
           result = merge_commands(val[0], val[1], val[2], val[3])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_48(val, _values, result)
           result = merge_commands(val[0], val[1], val[2])
     
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_49(val, _values, result)
     result = { adverbs: [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_50(val, _values, result)
               result = val[0]
           result[:adverbs] << val[2] 
         
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_51(val, _values, result)
     result = '' 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_52(val, _values, result)
     result = 'and' 
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_56(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_57(val, _values, result)
     result = val[0] + [ val[1] ] 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_84(val, _values, result)
        result = merge_commands(val[1], {
      direct: val[0]
    })
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 204)
  def _reduce_85(val, _values, result)
        result = merge_commands(val[2], {
      indirect: val[1],
      indirect_preposition: val[0]
    })
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_86(val, _values, result)
        result = merge_commands(val[2], {
      instrument: val[1],
      instrument_preposition: val[0]
    })
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_87(val, _values, result)
        result = {
      quantifier: val[0],
      adjectives: val[1].take(val[1].length-1),
      nominal: val[1].last
    }
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_88(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_89(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_90(val, _values, result)
            result = {
          quantifier: {
            quantity: 'all'
          }
        }
      
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_92(val, _values, result)
            result = merge_commands(val[0], {
          relation: {
            preposition: val[1],
            target: val[2]
          }
        })
      
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_103(val, _values, result)
                  result = { article: val[0] }
            
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_104(val, _values, result)
                  result = {
                article: val[0],
                quantity: val[1]
              }
            
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_105(val, _values, result)
                  result = {
                quantity: val[1]
              }
            
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_106(val, _values, result)
                  result = {
                quantity: 'all'
              }
            
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_107(val, _values, result)
                  result = {
                quantity: val[0]
              }
            
    result
  end
.,.,

# reduce 108 omitted

module_eval(<<'.,.,', 'grammar.y', 279)
  def _reduce_109(val, _values, result)
                   if val[0][:quantity].is_a?(Array)
                 result = val[0]
               else
                 result = {
                   quantity: [ val[0] ]
                 }
               end
               result[:quantity] += [ val[2] ]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_110(val, _values, result)
     result = {} 
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_112(val, _values, result)
                result = [ val[0], val[1] ]
          
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Grammar
