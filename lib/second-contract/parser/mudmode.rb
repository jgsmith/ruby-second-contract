#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module SecondContract
  module Parser
    class MudMode < Racc::Parser

module_eval(<<'...end mudmode.y/module_eval...', 'mudmode.y', 41)

def next_token
  @token = nil
  if !@source.eos?
    case
    when @source.scan(/\(\{\s*/)
      @token = [ :ARRAY_START, '({' ]
    when @source.scan(/\}\)\s*/)
      @token = [ :ARRAY_END, '})' ]
    when @source.scan(/\(\[\s*/)
      @token = [ :MAP_START, '([' ]
    when @source.scan(/\]\)\s*/)
      @token = [ :MAP_END, '])' ]
    when @source.scan(/:\s*/)
      @token = [ :MAP_SEP, ':' ]
    when @source.scan(/,\s*/)
      @token = [ :ARRAY_SEP, ',' ]
    when @source.scan(/(\.\d+|\d+\.(\d+)?)\s*/)
      @token = [ :FLOAT, @source[1].to_f ]
    when @source.scan(/(\d+)\s*/)
      @token = [ :INT, @source[1].to_i ]
    when @source.scan(/"(([^"]+|\\")*)"/)
      @token = [ :STRING, @source[1].sub(/\\"/, '"') ]
    else
      @source.skip_until(/\s/)
      @token = [ :ERROR, '' ]
    end
  end
  @token
end

def parse(text)
  @source = StringScanner.new text.strip
  do_parse
end

def to_mudmode(data)
  if data.is_a?(Integer) || data.is_a?(Float)
    return data.to_s
  elsif data.is_a?(String)
    return '"' + data.gsub("\\", "\\\\").gsub('"', "\\\"").gsub("\t", "\\t").gsub("\n", "\\n").gsub(/[^ -~]+/,'') + '"'
  elsif data.is_a?(Array)
    return "({" + data.map { |d| to_mudmode(d) }.join(",") + "})"
  elsif data.is_a?(Hash)
    # we sort keys so we are consistent across runs - makes testing easier
    return "([" + data.to_a.sort { |a,b| 
      if a[0] < b[0] 
        -1
      elsif a[0] > b[0]
        1
      else
        0
      end
    }.map { |s| to_mudmode(s[0]) + ":" + to_mudmode(s[1]) }.join(",") + "])"
  elsif data.nil?
    return "0"
  else
    return data.class.name
  end
end
...end mudmode.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    12,    10,    22,    13,     8,    21,     9,    17,    11,
    12,    10,    20,    29,     8,    24,     9,    11,    12,    10,
    23,    25,     8,    14,     9,    11,    12,    10,   nil,   nil,
     8,   nil,     9,    11,    12,    10,   nil,   nil,     8,   nil,
     9,    11,    12,    10,   nil,   nil,     8,   nil,     9,    11,
    12,    10,   nil,   nil,     8,   nil,     9 ]

racc_action_check = [
     9,     9,     9,    15,     1,     9,    15,     9,     9,     0,
     0,     0,    13,    27,     0,    18,     0,     8,     8,     8,
    18,    19,     8,     8,     8,    25,    25,    25,   nil,   nil,
    25,   nil,    25,    24,    24,    24,   nil,   nil,    24,   nil,
    24,    22,    22,    22,   nil,   nil,    22,   nil,    22,    29,
    29,    29,   nil,   nil,    29,   nil,    29 ]

racc_action_pointer = [
     7,     4,   nil,   nil,   nil,   nil,   nil,   nil,    15,    -2,
   nil,   nil,   nil,    12,   nil,    -2,   nil,   nil,    10,    15,
   nil,   nil,    39,   nil,    31,    23,   nil,     7,   nil,    47,
   nil ]

racc_action_default = [
   -20,   -20,    -1,    -2,    -3,    -4,    -5,    -6,   -20,   -20,
   -11,   -12,   -13,   -20,    -7,   -20,   -14,    -9,   -20,   -20,
    31,    -8,   -15,   -10,   -18,   -20,   -16,   -20,   -17,   -20,
   -19 ]

racc_goto_table = [
     2,    15,     1,    18,   nil,   nil,   nil,   nil,    16,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,    27,    28,   nil,   nil,   nil,    30 ]

racc_goto_check = [
     2,     8,     1,     9,   nil,   nil,   nil,   nil,     2,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,     2,     2,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     2,     0,   nil,   nil,   nil,   nil,   nil,    -7,    -6 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 12, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  2, 17, :_reduce_7,
  3, 17, :_reduce_8,
  2, 18, :_reduce_9,
  3, 18, :_reduce_10,
  1, 16, :_reduce_none,
  1, 14, :_reduce_none,
  1, 15, :_reduce_none,
  1, 19, :_reduce_14,
  2, 19, :_reduce_15,
  3, 19, :_reduce_16,
  3, 20, :_reduce_17,
  2, 20, :_reduce_18,
  5, 20, :_reduce_19 ]

racc_reduce_n = 20

racc_shift_n = 31

racc_token_table = {
  false => 0,
  :error => 1,
  :INT => 2,
  :FLOAT => 3,
  :STRING => 4,
  :ARRAY_SEP => 5,
  :MAP_SEP => 6,
  :ARRAY_START => 7,
  :ARRAY_END => 8,
  :MAP_START => 9,
  :MAP_END => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INT",
  "FLOAT",
  "STRING",
  "ARRAY_SEP",
  "MAP_SEP",
  "ARRAY_START",
  "ARRAY_END",
  "MAP_START",
  "MAP_END",
  "$start",
  "start",
  "element",
  "int",
  "float",
  "string",
  "array",
  "map",
  "array_elements",
  "map_elements" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'mudmode.y', 19)
  def _reduce_7(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mudmode.y', 20)
  def _reduce_8(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mudmode.y', 22)
  def _reduce_9(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'mudmode.y', 23)
  def _reduce_10(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'mudmode.y', 31)
  def _reduce_14(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mudmode.y', 32)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mudmode.y', 33)
  def _reduce_16(val, _values, result)
     result = val[0]; result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'mudmode.y', 35)
  def _reduce_17(val, _values, result)
     result = [ [ val[0], val[2] ] ]; 
    result
  end
.,.,

module_eval(<<'.,.,', 'mudmode.y', 36)
  def _reduce_18(val, _values, result)
     result = val[0]; 
    result
  end
.,.,

module_eval(<<'.,.,', 'mudmode.y', 37)
  def _reduce_19(val, _values, result)
     result = val[0]; result << [ val[2], val[4] ]; 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class MudMode
    end   # module Parser
  end   # module SecondContract
